// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "heartbeat.proto" (package "pb", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MESSAGE_TYPE } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message pb.WebsocketPingCommand
 */
export interface WebsocketPingCommand {
  /**
   * @generated from protobuf field: optional string nodeId = 1;
   */
  nodeId?: string;
  /**
   * @generated from protobuf field: optional string userId = 2;
   */
  userId?: string;
  /**
   * @generated from protobuf field: optional uint64 timestamp = 3;
   */
  timestamp?: bigint;
  /**
   * @generated from protobuf field: optional string msgSign = 4;
   */
  msgSign?: string;
}
/**
 * @generated from protobuf message pb.WebsocketPongCommand
 */
export interface WebsocketPongCommand {
  /**
   * @generated from protobuf field: optional string nodeId = 1;
   */
  nodeId?: string;
  /**
   * @generated from protobuf field: optional string userId = 2;
   */
  userId?: string;
  /**
   * @generated from protobuf field: optional uint64 timestamp = 3;
   */
  timestamp?: bigint;
  /**
   * @generated from protobuf field: optional string msgSign = 4;
   */
  msgSign?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketPingCommand$Type extends MessageType<WebsocketPingCommand> {
  constructor() {
    super('pb.WebsocketPingCommand', [
      { no: 1, name: 'nodeId', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'userId', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'timestamp',
        kind: 'scalar',
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 4, name: 'msgSign', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<WebsocketPingCommand>): WebsocketPingCommand {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<WebsocketPingCommand>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: WebsocketPingCommand,
  ): WebsocketPingCommand {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string nodeId */ 1:
          message.nodeId = reader.string();
          break;
        case /* optional string userId */ 2:
          message.userId = reader.string();
          break;
        case /* optional uint64 timestamp */ 3:
          message.timestamp = reader.uint64().toBigInt();
          break;
        case /* optional string msgSign */ 4:
          message.msgSign = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: WebsocketPingCommand,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string nodeId = 1; */
    if (message.nodeId !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
    /* optional string userId = 2; */
    if (message.userId !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* optional uint64 timestamp = 3; */
    if (message.timestamp !== undefined) writer.tag(3, WireType.Varint).uint64(message.timestamp);
    /* optional string msgSign = 4; */
    if (message.msgSign !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.msgSign);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.WebsocketPingCommand
 */
export const WebsocketPingCommand = new WebsocketPingCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketPongCommand$Type extends MessageType<WebsocketPongCommand> {
  constructor() {
    super('pb.WebsocketPongCommand', [
      { no: 1, name: 'nodeId', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'userId', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'timestamp',
        kind: 'scalar',
        opt: true,
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 4, name: 'msgSign', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<WebsocketPongCommand>): WebsocketPongCommand {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
    if (value !== undefined) reflectionMergePartial<WebsocketPongCommand>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: WebsocketPongCommand,
  ): WebsocketPongCommand {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional string nodeId */ 1:
          message.nodeId = reader.string();
          break;
        case /* optional string userId */ 2:
          message.userId = reader.string();
          break;
        case /* optional uint64 timestamp */ 3:
          message.timestamp = reader.uint64().toBigInt();
          break;
        case /* optional string msgSign */ 4:
          message.msgSign = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: WebsocketPongCommand,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional string nodeId = 1; */
    if (message.nodeId !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
    /* optional string userId = 2; */
    if (message.userId !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.userId);
    /* optional uint64 timestamp = 3; */
    if (message.timestamp !== undefined) writer.tag(3, WireType.Varint).uint64(message.timestamp);
    /* optional string msgSign = 4; */
    if (message.msgSign !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.msgSign);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.WebsocketPongCommand
 */
export const WebsocketPongCommand = new WebsocketPongCommand$Type();
